#!/usr/bin/perl

# This program interpolates a stellar spectrum in a kurucz table.
# Interpolation is done in Teff and logg and log Z

# Of course, on could do that as well...

use Getopt::Std;
getopts("q");

#$dir = "/home/dominik/dkerb/KURUCZ";
#$dir = "/scratch/dullemon/kurucz";
$dir = "../KURUCZ";

use POSIX qw(ceil floor);

unless (@ARGV) {
    print <<"EOF";
usage: kurucz T logg metalicity
EOF
    exit;
}

@temperatures =
    (3500.,3750.,4000.,4250.,4500.,4750.,5000.,5250.,5500.,5750.,6000.,
     6250.,6500.,6750.,7000.,7250.,7500.,7750.,8000.,8250.,8500.,8750.,
     9000.,9250.,9500.,9750.,10000.,10500.,11000.,11500.,12000.,12500.,
     13000.,14000.,15000.,16000.,17000.,18000.,19000.,20000.,21000.,22000.,
     23000.,24000.,25000.,26000.,27000.,28000.,29000.,30000.,31000.,32000.,
     33000.,34000.,35000.,37500.,40000.,42500.,45000.,47500.,50000.);

@loggs = (0.0,0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0);

@metalicities = sort {$a<=>$b} map {/f([mp])(\d\d)/;($1 eq 'm' ? -$2 : $2) } split(' ',`ls $dir/f*.pck*`);

$T = shift;
$logg = shift;
$met0 = shift;
$met = $met0*10;
$dir = @ARGV[0];

($T_low,$T_high,$delta_t) = find_in_table($T,\@temperatures);
($logg_low,$logg_high,$delta_logg) = find_in_table($logg,\@loggs);
($met_low,$met_high,$delta_met) = find_in_table($met,\@metalicities);

print STDERR <<"EOF";
Parameters bracketed:
Temperature:  $T   is between $T_low and $T_high ($delta_t)
log g:        $logg is between $logg_low and $logg_high ($delta_logg)
Metalicity:   $met is between $met_low and $met_high ($delta_met)
EOF
    ;


@logfluxmetlow  = interpolate_flux($met_low);
@logfluxmethigh = interpolate_flux($met_high);


$shiftlambda = 4;
$shiftflux   = 6.55-23;

printf "# Teff = %5d, log g = %5.2f, z = %5.2f\n",$T,$logg,$met0 unless $opt_q;

for($i=0;$i<=1220;$i++) {
    printf "%13.5e %13.5e\n",
    log10($lambda[$i])+$shiftlambda,
    $logfluxmetlow[$i] + ($met-$met_low)/($met_high-$met_low)
	*($logfluxmethigh[$i]-$logfluxmetlow[$i]);
    #$logfluxmetlow[$i],$logfluxmethigh[$i];
}

sub interpolate_flux {
    my($met) = @_;
    my($file) = sprintf("f%s%02dk2.pck",$met >=0 ? 'p' : 'm', abs($met));
    my($usef,$i);
    print STDERR "looking in file $file\n";

    my($m) = -$delta_t/$delta_logg;
    my($b) = $T_high - $m*$logg_low;
    my($tvong) = $m*$logg+$b;
    if ($T<=$tvong) {
	print STDERR "use lower left triangle in log g - T plane for interpolation\n";
	$usef = 1;
    } else {
	print STDERR "use upper right triangle in log g - T plane for interpolation\n";
	$usef = 2;
    }

    if (-e "$dir/$file") {
	open KURUCZ,"$dir/$file" or die "can't open$dir/$file $!";
    } elsif (-e "$dir/$file.gz") {
	open KURUCZ,"gunzip -c $dir/$file.gz |" or die "can't open $dir/$file.gz $!";
    }
	
    @lambda = @flux = @fluxcont = ();

    for $i (1..22) {$_ = <KURUCZ>}   # skip the program
    for $i (1..153) {
	$_ = <KURUCZ>;
	@F = split;
	foreach (@F) {$_ *= 1e-7}
	push @lambda,@F;
    }
    print "@lambda" if $debug;

    $nfound = 0;

  MODEL:
    while (<KURUCZ>) {
	(undef,$t,undef,$g) = (split);
	print STDERR "looking at $t $g\n" if $debug;
	unless (($t == $T_low || $t == $T_high) && 
		($g == $logg_low || $g == $logg_high)) {
	    for $i (1..153) {$_ = <KURUCZ>}
	    for $i (1..153) {$_ = <KURUCZ>}
	    next MODEL;
	}
	print STDERR "found Teff=$t log g = $g\n";
	$nfound++;
	for $i (1..153) {
	    $_ = <KURUCZ>;
	    @F = unpack("a10a10a10a10a10a10a10a10",$_);
	    push @flux,@F;
	}
		
	for $i (1..153) {	
	    $_ = <KURUCZ>;
	    @F = unpack("a10a10a10a10a10a10a10a10",$_);
	    push @fluxcont,@F;
	}
	if ($t == $T_low && $g == $logg_low) {
	    @flux11 = @flux;
	    @fluxcont11 = @fluxcont;
	} elsif ($t == $T_low && $g == $logg_high) {
	    @flux21 = @flux;
	    @fluxcont21 = @fluxcont;
	} elsif ($t == $T_high && $g == $logg_low) {
	    @flux12 = @flux;
	    @fluxcont12 = @fluxcont;
	} elsif ($t == $T_high && $g == $logg_high) {
	    @flux22 = @flux;
	    @fluxcont22 = @fluxcont;
	} else {
	    die "fatal";
	}
	@flux = @fluxcont = ();
	last if $nfound == 4;
    }
    die "Illegal parameter combination\n" unless $nfound==4;

    close KURUCZ;

    foreach (@flux11) {$_=log10($_)}
    foreach (@flux21) {$_=log10($_)}
    foreach (@flux12) {$_=log10($_)}
    foreach (@flux22) {$_=log10($_)}

    for $i (0..1220) {

	$a1 = ($flux21[$i]-$flux11[$i])/$delta_logg;
	$b1 = ($flux12[$i]-$flux11[$i])/$delta_t;
	$a2 = -($flux12[$i]-$flux22[$i])/$delta_logg;
	$b2 = -($flux21[$i]-$flux22[$i])/$delta_t;
	$fi1 = $flux11[$i] + $a1*($logg-$logg_low)  + $b1*($T-$T_low);
	$fi2 = $flux22[$i] + $a2*($logg-$logg_high) + $b2*($T-$T_high);
	
	$flux[$i] = ($usef == 1 ? $fi1 : $fi2);
    }
    return @flux;


}

sub log10 {
    $_[0] > 0 ?	log($_[0]) / log(10) : -1000;
}


sub find_in_table {
    my($value,$tableref) = @_;
    my($low,$high,$delta,$i);

    die "Value $value too low\n" if $value <$tableref->[0];
    
    for ($i=1;$i<=$#{$tableref};$i++) {
	if ($value<$tableref->[$i]) {
	    return ($tableref->[$i-1], $tableref->[$i],
		    $tableref->[$i] - $tableref->[$i-1]);
	}
    }
    die "Value $value too high.\n";
}
